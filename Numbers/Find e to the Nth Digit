#Yo

from decimal import Decimal, localcontext


def e_number(digits, times):
    num = 1
    e = 2.718281828459
    i = 1

    # If digits >=7 we use localcontext else round, otherwise we get false calculations
    if digits >= 7:
        with localcontext() as ctx:
            ctx.prec = digits

            while num < e:
                num = (1 + (1 / Decimal(i))) ** i
                print(f"\u001b[1m#{i}\u001b[0m, {num}")
                i += 1
                if i == times + 1:
                    break
    else:
        while num < e:
            num = (1 + (1 / i)) ** i
            print(f"\u001b[1m#{i}\u001b[0m, {round(num, digits)}")
            i += 1
            if i == times + 1:
                break


print("Hi, this program calculates Euler's number\n\n"
      "You can set a limit to how many digits you want to see in Euler's number as well as how many times you want to repeat calculation\n")

while True:

    # Entering digits
    while True:
        digits = input("Now set a limit to how many digits you want to see\nThe number should be natural and under a\u001b[1m 1001\u001b[0m and more than\u001b[1m 0 \u001b[0m\n")
        try:
            if 0 < int(digits) <= 1000:
                break
        except ValueError:
            continue

    # Entering times
    while True:
        times = input("All right, now how many times do you want the program to calculate?\nThis should also be under a\u001b[1m 1001\u001b[0m and more than\u001b[1m 0 \u001b[0m :)\n")
        try:
            if 0 < int(times) <= 1000:
                break
        except ValueError:
            continue

    e_number(int(digits), int(times))

    while True:
        try_again = input("\nTry again? y/n: ")
        if try_again == "y":
            break
        elif try_again == "n":
            exit()
        else:
            continue

